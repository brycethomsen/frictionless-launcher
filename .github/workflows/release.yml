name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (leave empty for snapshot)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build Linux binaries
        run: |
          mkdir -p dist
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/Frictionless-Launcher-linux-amd64 .
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: dist/

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build Windows binaries
        run: |
          mkdir dist
          $env:CGO_ENABLED=1; $env:GOOS="windows"; $env:GOARCH="amd64"; go build -ldflags="-s -w -H windowsgui" -o dist/Frictionless-Launcher-windows-amd64.exe .

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: dist/

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build macOS binaries
        run: |
          mkdir -p dist
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/Frictionless-Launcher-darwin-amd64 .
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/Frictionless-Launcher-darwin-arm64 .

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: dist/

  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.event.inputs.tag || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Copy all binaries to temp directory for archiving
          find artifacts -name "Frictionless-Launcher-*" -exec cp {} . \;
          
          # Create archives directly in release-assets
          tar -czf release-assets/Frictionless-Launcher-linux-amd64.tar.gz Frictionless-Launcher-linux-amd64
          tar -czf release-assets/Frictionless-Launcher-darwin-amd64.tar.gz Frictionless-Launcher-darwin-amd64
          tar -czf release-assets/Frictionless-Launcher-darwin-arm64.tar.gz Frictionless-Launcher-darwin-arm64
          zip release-assets/Frictionless-Launcher-windows-amd64.zip Frictionless-Launcher-windows-amd64.exe
          
          # Generate checksums for archives only
          cd release-assets
          sha256sum *.tar.gz *.zip > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          name: Frictionless Launcher ${{ github.event.inputs.tag || github.ref_name }}
          draft: false
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
